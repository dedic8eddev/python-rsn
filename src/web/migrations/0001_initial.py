# -*- coding: utf-8 -*-
# Generated by Django 1.11.17 on 2020-05-13 16:33
from __future__ import unicode_literals

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import django_countries.fields
import uuid
import web.models
import web.utils.upload_tools
import web.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and -/_ only.', max_length=150, unique=True, validators=[web.validators.RaisinUnicodeUsernameValidator()], verbose_name='username')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('key', models.CharField(default=web.models.generate_key, max_length=40)),
                ('push_user_id', models.CharField(blank=True, max_length=255, null=True)),
                ('push_user_token', models.CharField(blank=True, max_length=255, null=True)),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('last_failed_attempt_time', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('failed_attempts_no', models.IntegerField(default=0, null=True)),
                ('full_name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=170, null=True)),
                ('type', models.IntegerField(choices=[(10, 'USER'), (20, 'EDITOR'), (30, 'ADMINISTRATOR')])),
                ('status', models.IntegerField(choices=[(10, 'ACTIVE'), (20, 'INACTIVE'), (25, 'BANNED')])),
                ('is_archived', models.BooleanField(default=False)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('website_url', models.CharField(blank=True, max_length=255, null=True)),
                ('wine_post_number', models.IntegerField(default=0)),
                ('comment_number', models.IntegerField(default=0)),
                ('post_number', models.IntegerField(default=0)),
                ('likevote_number', models.IntegerField(default=0)),
                ('drank_it_too_number', models.IntegerField(default=0)),
                ('star_review_number', models.IntegerField(default=0)),
                ('activation_reminder_sent_number', models.IntegerField(default=0)),
                ('activation_reminder_sent_last_date', models.DateTimeField(null=True)),
                ('notify_likes', models.BooleanField(default=False)),
                ('notify_drank_it_toos', models.BooleanField(default=False)),
                ('notify_comments', models.BooleanField(default=False)),
                ('notify_wine_reviewed', models.BooleanField(default=False)),
                ('has_badge', models.BooleanField(default=False)),
                ('has_p_once', models.BooleanField(default=False)),
                ('has_p_monthly', models.BooleanField(default=False)),
                ('badge_expiry_date_ms', models.BigIntegerField(null=True)),
                ('badge_last_updated_date_ms', models.BigIntegerField(null=True)),
                ('badge_last_purchase_date_ms', models.BigIntegerField(null=True)),
                ('p_once_expiry_date_ms', models.BigIntegerField(null=True)),
                ('p_once_last_updated_date_ms', models.BigIntegerField(null=True)),
                ('p_once_last_purchase_date_ms', models.BigIntegerField(null=True)),
                ('p_monthly_expiry_date_ms', models.BigIntegerField(null=True)),
                ('p_monthly_expiry_date_ms_apple', models.BigIntegerField(null=True)),
                ('p_monthly_expiry_date_ms_android', models.BigIntegerField(null=True)),
                ('p_monthly_last_updated_date_ms', models.BigIntegerField(null=True)),
                ('p_monthly_last_updated_date_ms_apple', models.BigIntegerField(null=True)),
                ('p_monthly_last_updated_date_ms_android', models.BigIntegerField(null=True)),
                ('p_monthly_last_purchase_date_ms', models.BigIntegerField(null=True)),
                ('p_monthly_last_purchase_date_ms_apple', models.BigIntegerField(null=True)),
                ('p_monthly_last_purchase_date_ms_android', models.BigIntegerField(null=True)),
                ('lang', models.TextField(blank=True, null=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='userprof_author', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('last_modifier', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='userprof_last_modifier', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AbstractImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('ordering', models.IntegerField(null=True)),
                ('width', models.IntegerField(null=True)),
                ('height', models.IntegerField(null=True)),
                ('image_file', models.ImageField(null=True, upload_to=web.utils.filenames.update_filename)),
            ],
        ),
        migrations.CreateModel(
            name='Attendee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('is_user_there', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CalEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.IntegerField(default=1)),
                ('import_time', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now)),
                ('is_archived', models.BooleanField(default=False)),
                ('status', models.IntegerField()),
                ('type', models.IntegerField(choices=[(10, 'EVENT'), (20, 'BOOKS_MOVIES')], default=None, null=True)),
                ('lang', models.CharField(blank=True, max_length=2, null=True)),
                ('external_id', models.CharField(blank=True, max_length=255, null=True)),
                ('external_author_name', models.CharField(max_length=255, null=True)),
                ('external_author_id', models.CharField(max_length=255, null=True)),
                ('external_url', models.TextField(null=True)),
                ('external_image_url', models.TextField(null=True)),
                ('external_created_time', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('external_modified_time', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('external_cal_id', models.TextField(blank=True, null=True)),
                ('external_cal_title', models.TextField(blank=True, null=True)),
                ('external_cal_desc', models.TextField(blank=True, null=True)),
                ('thumb_file', models.CharField(max_length=255, null=True)),
                ('image_width', models.IntegerField(null=True)),
                ('image_height', models.IntegerField(null=True)),
                ('title', models.TextField(null=True)),
                ('description', models.TextField(null=True)),
                ('start_date', models.DateTimeField(null=True)),
                ('end_date', models.DateTimeField(null=True)),
                ('price', models.CharField(max_length=255, null=True)),
                ('is_pro', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('loc_name', models.TextField(max_length=255, null=True)),
                ('loc_external_id', models.TextField(max_length=255, null=True)),
                ('loc_lat', models.FloatField(default=0, null=True)),
                ('loc_lng', models.FloatField(default=0, null=True)),
                ('loc_full_street_address', models.TextField(null=True)),
                ('loc_street_address', models.TextField(null=True)),
                ('loc_house_number', models.CharField(max_length=10, null=True)),
                ('loc_zip_code', models.CharField(max_length=255, null=True)),
                ('loc_city', models.CharField(max_length=128, null=True)),
                ('loc_country', models.CharField(blank=True, max_length=128, null=True)),
                ('loc_state', models.CharField(blank=True, max_length=128, null=True)),
                ('loc_country_iso_code', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('last_modifier', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cal_event_last_modifier', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now)),
                ('status', models.IntegerField(choices=[(10, 'DRAFT'), (20, 'PUBLISHED')], default=10)),
                ('is_archived', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('user_mentions', django.db.models.JSONField(null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('cal_event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.CalEvent')),
            ],
        ),
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now)),
                ('is_archived', models.BooleanField(default=False)),
                ('app_os', models.CharField(max_length=10, null=True)),
                ('product_id', models.TextField(null=True)),
                ('transaction_id', models.TextField(null=True)),
                ('is_sandbox', models.BooleanField(default=False)),
                ('date_from', models.DateTimeField(null=True)),
                ('date_to', models.DateTimeField(null=True)),
                ('frequency', models.IntegerField(choices=[(10, 'ONCE'), (20, 'MONTHLY')], null=True)),
                ('status', models.IntegerField(choices=[(10, 'ACTIVE'), (20, 'FINISHED'), (30, 'CANCELED'), (35, 'FAILED')], null=True)),
                ('value', models.FloatField(null=True)),
                ('qty', models.IntegerField(null=True)),
                ('currency', models.CharField(max_length=3, null=True)),
                ('resp_item_json', django.db.models.JSONField(null=True)),
                ('extra_json', django.db.models.JSONField(null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DonationReceipt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now)),
                ('is_archived', models.BooleanField(default=False)),
                ('app_os', models.CharField(max_length=10, null=True)),
                ('receipt_data', models.TextField(null=True)),
                ('provider_response', django.db.models.JSONField(null=True)),
                ('is_sandbox', models.BooleanField(default=False)),
                ('status', models.IntegerField(choices=[(10, 'OK'), (15, 'FAILED')], null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DrankItToo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now)),
                ('is_archived', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FreeGlassEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now)),
                ('is_archived', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=255, null=True)),
                ('start_date', models.DateTimeField(null=True)),
                ('end_date', models.DateTimeField(null=True)),
                ('map_fullscreen_end_date', models.DateTimeField(null=True)),
                ('announcement_date', models.DateTimeField(null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GetMyFreeGlass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now)),
                ('is_archived', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GotFreeGlass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now)),
                ('is_archived', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LikeVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('cal_event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.CalEvent')),
            ],
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('last_wl_an_time', models.DateTimeField(default=None, null=True)),
                ('total_wl_score', models.FloatField(default=0.0, null=True)),
                ('status', models.IntegerField()),
                ('in_doubt', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
                ('is_expert_modified', models.BooleanField(db_index=True, default=False)),
                ('wl_added', models.BooleanField(default=False)),
                ('validated_at', models.DateTimeField(null=True)),
                ('team_comments', models.TextField(blank=True, null=True)),
                ('external_id', models.CharField(max_length=128, null=True)),
                ('name', models.CharField(max_length=128)),
                ('type', models.IntegerField(choices=[(10, 'RESTAURANT'), (20, 'BAR'), (30, 'WINE_SHOP')], null=True)),
                ('description', models.TextField(blank=True)),
                ('user_mentions', django.db.models.JSONField(null=True)),
                ('street_address', models.TextField(blank=True, null=True)),
                ('full_street_address', models.TextField(blank=True, null=True)),
                ('house_number', models.CharField(max_length=10, null=True)),
                ('zip_code', models.TextField(blank=True, null=True)),
                ('city', models.CharField(max_length=128, null=True)),
                ('country', models.CharField(blank=True, max_length=128, null=True)),
                ('state', models.CharField(blank=True, max_length=128, null=True)),
                ('country_iso_code', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('phone_number', models.CharField(max_length=50, null=True)),
                ('website_url', models.CharField(max_length=255, null=True)),
                ('email', models.EmailField(max_length=255, null=True)),
                ('latitude', models.FloatField(default=0, null=True)),
                ('longitude', models.FloatField(default=0, null=True)),
                ('pin_latitude', models.FloatField(default=0, null=True)),
                ('pin_longitude', models.FloatField(default=0, null=True)),
                ('country_old', models.CharField(blank=True, max_length=128, null=True)),
                ('country_iso_code_old', models.CharField(blank=True, max_length=3, null=True)),
                ('city_old', models.CharField(blank=True, max_length=128, null=True)),
                ('social_facebook_url', models.CharField(max_length=255, null=True)),
                ('social_twitter_url', models.CharField(max_length=255, null=True)),
                ('social_instagram_url', models.CharField(max_length=255, null=True)),
                ('sticker_sent', models.BooleanField(default=False)),
                ('free_glass', models.BooleanField(default=False)),
                ('free_glass_signup_date', models.DateTimeField(default=None, null=True)),
                ('free_glass_last_action_date', models.DateTimeField(default=None, null=True)),
                ('is_wine_shop', models.BooleanField(default=False)),
                ('is_restaurant', models.BooleanField(default=False)),
                ('is_bar', models.BooleanField(default=False)),
                ('comment_number', models.IntegerField(default=0)),
                ('likevote_number', models.IntegerField(default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlaceOpeningHoursWeek',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('monday_from', models.TimeField(null=True)),
                ('monday_to', models.TimeField(null=True)),
                ('monday_active', models.BooleanField(default=False)),
                ('tuesday_from', models.TimeField(null=True)),
                ('tuesday_to', models.TimeField(null=True)),
                ('tuesday_active', models.BooleanField(default=False)),
                ('wednesday_from', models.TimeField(null=True)),
                ('wednesday_to', models.TimeField(null=True)),
                ('wednesday_active', models.BooleanField(default=False)),
                ('thursday_from', models.TimeField(null=True)),
                ('thursday_to', models.TimeField(null=True)),
                ('thursday_active', models.BooleanField(default=False)),
                ('friday_from', models.TimeField(null=True)),
                ('friday_to', models.TimeField(null=True)),
                ('friday_active', models.BooleanField(default=False)),
                ('saturday_from', models.TimeField(null=True)),
                ('saturday_to', models.TimeField(null=True)),
                ('saturday_active', models.BooleanField(default=False)),
                ('sunday_from', models.TimeField(null=True)),
                ('sunday_to', models.TimeField(null=True)),
                ('sunday_active', models.BooleanField(default=False)),
                ('place', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Place')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now)),
                ('validated_at', models.DateTimeField(null=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.IntegerField()),
                ('in_doubt', models.BooleanField(default=False)),
                ('type', models.IntegerField(choices=[(10, 'WINE'), (20, 'NOT_WINE')])),
                ('is_parent_post', models.BooleanField(default=False)),
                ('wine_year', models.CharField(max_length=10, null=True)),
                ('wine_trade', models.BooleanField(default=False)),
                ('free_so2', models.TextField(blank=True, null=True)),
                ('total_so2', models.TextField(blank=True, null=True)),
                ('grape_variety', models.CharField(blank=True, max_length=255, null=True)),
                ('yearly_data', django.db.models.JSONField(null=True)),
                ('certified_by', models.TextField(blank=True, null=True)),
                ('is_organic', models.BooleanField(default=False)),
                ('is_biodynamic', models.BooleanField(default=False)),
                ('user_mentions', django.db.models.JSONField(null=True)),
                ('team_comments', models.TextField(blank=True, null=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('is_star_review', models.BooleanField(default=False)),
                ('is_star_discovery', models.BooleanField(default=False)),
                ('is_scanned', models.BooleanField(default=False)),
                ('latitude', models.FloatField(default=0, null=True)),
                ('longitude', models.FloatField(default=0, null=True)),
                ('foursquare_place_name', models.CharField(max_length=255, null=True)),
                ('foursquare_place_url', models.CharField(max_length=255, null=True)),
                ('comment_number', models.IntegerField(default=0)),
                ('likevote_number', models.IntegerField(default=0)),
                ('drank_it_too_number', models.IntegerField(default=0)),
                ('star_review_number', models.IntegerField(default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('expert', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='post_expert', to=settings.AUTH_USER_MODEL)),
                ('last_modifier', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='post_last_modifier', to=settings.AUTH_USER_MODEL)),
                ('parent_post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Post')),
                ('place', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Place')),
                ('validated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='post_validated_by', to=settings.AUTH_USER_MODEL)),
                ('vuf_match_post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vuforia_matched_post', to='web.Post')),
            ],
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('key', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('int_value', models.IntegerField(null=True)),
                ('text_value', models.TextField(null=True)),
                ('float_value', models.FloatField(null=True)),
                ('type', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='StatsClick',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now)),
                ('place_clicks', models.IntegerField(default=0)),
                ('wm_clicks', models.IntegerField(default=0)),
                ('total_clicks', models.IntegerField(default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SysMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_type', models.IntegerField(choices=[(10, 'EMAIL'), (20, 'SMS')])),
                ('to_address', models.CharField(max_length=255)),
                ('to_name', models.CharField(max_length=255, null=True)),
                ('from_address', models.CharField(max_length=255)),
                ('from_name', models.CharField(max_length=255, null=True)),
                ('title', models.CharField(max_length=255, null=True)),
                ('content', models.TextField()),
                ('send_attempts_number', models.IntegerField(default=0)),
                ('last_attempt_date', models.DateTimeField(null=True)),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('status', models.IntegerField(choices=[(10, 'PENDING'), (20, 'SENT')])),
            ],
        ),
        migrations.CreateModel(
            name='TimeLineItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('is_sticky', models.BooleanField(default=False)),
                ('item_description', models.TextField(blank=True, null=True)),
                ('cached_item', django.db.models.JSONField(default=dict)),
                ('item_type', models.IntegerField(choices=[(10, 'USER'), (20, 'POST'), (30, 'PLACE')], default=None)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timeline_item_author', to=settings.AUTH_USER_MODEL)),
                ('place_item', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Place')),
                ('post_item', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Post')),
                ('user_item', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            managers=[
                ('active', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TotalStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('vuforia_scans_total', models.IntegerField(default=0)),
                ('vuforia_scans_android', models.IntegerField(default=0)),
                ('vuforia_scans_ios', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now)),
                ('status', models.IntegerField(choices=[(10, 'DRAFT'), (20, 'PUBLISHED')], default=10)),
                ('is_archived', models.BooleanField(default=False)),
                ('type', models.IntegerField(choices=[(10, 'NOTIFY_LIKE_WINEPOST'), (20, 'NOTIFY_DRANK_IT_TOO'), (30, 'NOTIFY_COMMENT_WINEPOST'), (40, 'NOTIFY_STAR_REVIEW'), (45, 'NOTIFY_STAR_REVIEW_AT_VALIDATION'), (50, 'NOTIFY_WINEPOST_ACCEPTED'), (60, 'NOTIFY_COMMENT_PLACE'), (70, 'NOTIFY_LIKE_PLACE'), (80, 'NOTIFY_PLACE_ACCEPTED'), (90, 'NOTIFY_MENTIONED_COMMENT'), (100, 'NOTIFY_MENTIONED_NOT_COMMENT'), (120, 'NOTIFY_FREE_GLASS')])),
                ('contents', models.TextField(null=True)),
                ('wine_name', models.CharField(max_length=255, null=True)),
                ('start_comment_post', models.IntegerField(null=True)),
                ('place_name', models.CharField(max_length=255, null=True)),
                ('wm_name', models.CharField(max_length=255, null=True)),
                ('start_comment_place', models.IntegerField(null=True)),
                ('user_name', models.CharField(max_length=255, null=True)),
                ('place', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Place')),
                ('post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_notification_user', to=settings.AUTH_USER_MODEL)),
                ('user_dest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_notification_user_dest', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Wine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now)),
                ('status', models.IntegerField(choices=[(10, 'ON_HOLD'), (15, 'IN_DOUBT'), (20, 'VALIDATED'), (25, 'REFUSED'), (30, 'BIO_ORGANIC'), (35, 'DELETED'), (40, 'HIDDEN')])),
                ('is_archived', models.BooleanField(default=False)),
                ('validated_at', models.DateTimeField(null=True)),
                ('name', models.CharField(max_length=255)),
                ('name_short', models.CharField(blank=True, max_length=255, null=True)),
                ('domain', models.CharField(blank=True, max_length=255, null=True)),
                ('designation', models.CharField(blank=True, max_length=255, null=True)),
                ('grape_variety', models.CharField(blank=True, max_length=255, null=True)),
                ('region', models.CharField(blank=True, max_length=255, null=True)),
                ('color', models.IntegerField(choices=[(10, 'RED'), (20, 'WHITE'), (30, 'PINK'), (40, 'ORANGE')], null=True)),
                ('year', models.CharField(max_length=10, null=True)),
                ('is_sparkling', models.BooleanField(default=False)),
                ('similiar_wine_exists', models.BooleanField(default=False)),
                ('similiar_wine_id', models.IntegerField(default=None, null=True)),
                ('external_id', models.CharField(default=None, max_length=128, null=True)),
                ('winemaker_name', models.CharField(blank=True, max_length=128, null=True)),
                ('wine_post_number', models.IntegerField(default=0)),
                ('total_likevote_number', models.IntegerField(default=0)),
                ('total_comment_number', models.IntegerField(default=0)),
                ('total_drank_it_too_number', models.IntegerField(default=0)),
                ('total_star_review_number', models.IntegerField(default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('validated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='wine_validated_by', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WineList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now)),
                ('status', models.IntegerField(choices=[(10, 'ON_HOLD'), (20, 'OK'), (30, 'BG')])),
                ('is_archived', models.BooleanField(default=False)),
                ('total_score_data', django.db.models.JSONField(null=True)),
                ('is_temp', models.BooleanField(default=False)),
                ('temp_parent_id', models.TextField(blank=True, null=True)),
                ('place', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Place')),
            ],
        ),
        migrations.CreateModel(
            name='WineListFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('ordering', models.IntegerField(null=True)),
                ('width', models.IntegerField(null=True)),
                ('height', models.IntegerField(null=True)),
                ('image_file', models.FileField(max_length=1000, null=True, upload_to=web.utils.filenames.update_filename)),
                ('item_text_rows', django.db.models.JSONField(null=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('winelist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.WineList')),
            ],
            options={
                'db_table': 'winelist_file',
            },
        ),
        migrations.CreateModel(
            name='Winemaker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(default=datetime.datetime.now)),
                ('modified_time', models.DateTimeField(default=datetime.datetime.now, null=True)),
                ('validated_at', models.DateTimeField(null=True)),
                ('team_comments', models.TextField(blank=True, null=True)),
                ('status', models.IntegerField()),
                ('in_doubt', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=128)),
                ('name_short', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('user_mentions', django.db.models.JSONField(null=True)),
                ('domain', models.CharField(max_length=128, null=True)),
                ('domain_short', models.CharField(blank=True, max_length=255, null=True)),
                ('is_organic', models.BooleanField(default=False)),
                ('is_biodynamic', models.BooleanField(default=False)),
                ('certified_by', models.TextField(blank=True, null=True)),
                ('wine_trade', models.BooleanField(default=False)),
                ('plough_horse', models.BooleanField(default=False)),
                ('domain_description', models.TextField(blank=True, null=True)),
                ('domain_description_translations', django.db.models.JSONField(null=True)),
                ('street_address', models.TextField(blank=True, null=True)),
                ('full_street_address', models.TextField(blank=True, null=True)),
                ('house_number', models.CharField(max_length=10, null=True)),
                ('zip_code', models.TextField(blank=True, null=True)),
                ('city', models.CharField(max_length=128, null=True)),
                ('country', models.CharField(blank=True, max_length=128, null=True)),
                ('state', models.CharField(blank=True, max_length=128, null=True)),
                ('country_iso_code', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('region', models.CharField(blank=True, max_length=128, null=True)),
                ('phone_number', models.CharField(max_length=50, null=True)),
                ('mobile_phone_number', models.CharField(max_length=50, null=True)),
                ('website_url', models.CharField(max_length=255, null=True)),
                ('email', models.CharField(max_length=255, null=True)),
                ('latitude', models.FloatField(default=0, null=True)),
                ('longitude', models.FloatField(default=0, null=True)),
                ('pin_latitude', models.FloatField(default=0, null=True)),
                ('pin_longitude', models.FloatField(default=0, null=True)),
                ('country_old', models.CharField(blank=True, max_length=128, null=True)),
                ('country_iso_code_old', models.CharField(blank=True, max_length=3, null=True)),
                ('city_old', models.CharField(blank=True, max_length=128, null=True)),
                ('social_facebook_url', models.CharField(max_length=255)),
                ('social_twitter_url', models.CharField(max_length=255)),
                ('social_instagram_url', models.CharField(max_length=255)),
                ('total_wine_number', models.IntegerField(default=0)),
                ('total_wine_post_number', models.IntegerField(default=0)),
                ('total_likevote_number', models.IntegerField(default=0)),
                ('total_comment_number', models.IntegerField(default=0)),
                ('total_drank_it_too_number', models.IntegerField(default=0)),
                ('total_star_review_number', models.IntegerField(default=0)),
                ('total_is_parent_post_number', models.IntegerField(default=0)),
                ('external_id', models.CharField(default=None, max_length=128, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('last_modifier', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='winemaker_last_modifier', to=settings.AUTH_USER_MODEL)),
                ('validated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='wm_validated_by', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlaceImage',
            fields=[
                ('abstractimage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='web.AbstractImage')),
                ('external_url', models.CharField(max_length=255, null=True)),
                ('external_id', models.CharField(max_length=255, null=True)),
            ],
            options={
                'db_table': 'place_image',
            },
            bases=('web.abstractimage',),
        ),
        migrations.CreateModel(
            name='PostFile',
            fields=[
                ('abstractimage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='web.AbstractImage')),
            ],
            options={
                'db_table': 'post_file',
            },
            bases=('web.abstractimage',),
        ),
        migrations.CreateModel(
            name='PostImage',
            fields=[
                ('abstractimage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='web.AbstractImage')),
            ],
            options={
                'db_table': 'post_image',
            },
            bases=('web.abstractimage',),
        ),
        migrations.CreateModel(
            name='UserImage',
            fields=[
                ('abstractimage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='web.AbstractImage')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_image',
            },
            bases=('web.abstractimage',),
        ),
        migrations.CreateModel(
            name='VuforiaImage',
            fields=[
                ('abstractimage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='web.AbstractImage')),
                ('target_id', models.TextField(blank=True, null=True)),
                ('rating_tracking', models.FloatField(blank=True, null=True)),
                ('rating_reco', models.TextField(blank=True, null=True)),
                ('is_dirty', models.BooleanField(default=False)),
                ('update_rating', models.BooleanField(default=False)),
                ('error', models.BooleanField(default=False)),
                ('vuforia_deleted', models.BooleanField(default=False)),
                ('delete_from_vuforia', models.BooleanField(default=False)),
                ('for_child_post', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'vuforia_image',
            },
            bases=('web.abstractimage',),
        ),
        migrations.CreateModel(
            name='WineImage',
            fields=[
                ('abstractimage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='web.AbstractImage')),
            ],
            options={
                'db_table': 'wine_image',
            },
            bases=('web.abstractimage',),
        ),
        migrations.CreateModel(
            name='WinemakerFile',
            fields=[
                ('abstractimage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='web.AbstractImage')),
                ('winemaker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Winemaker')),
            ],
            options={
                'db_table': 'winemaker_file',
            },
            bases=('web.abstractimage',),
        ),
        migrations.CreateModel(
            name='WinemakerImage',
            fields=[
                ('abstractimage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='web.AbstractImage')),
                ('winemaker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Winemaker')),
            ],
            options={
                'db_table': 'winemaker_image',
            },
            bases=('web.abstractimage',),
        ),
        migrations.AddField(
            model_name='wine',
            name='winemaker',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Winemaker'),
        ),
        migrations.AddField(
            model_name='usernotification',
            name='wm',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Winemaker'),
        ),
        migrations.AddField(
            model_name='post',
            name='vuf_match_wine',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vuforia_matched_wine', to='web.Wine'),
        ),
        migrations.AddField(
            model_name='post',
            name='wine',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Wine'),
        ),
        migrations.AddField(
            model_name='place',
            name='current_opening_hours',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='current_opening_hours', to='web.PlaceOpeningHoursWeek'),
        ),
        migrations.AddField(
            model_name='place',
            name='expert',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='place_expert', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='place',
            name='last_modifier',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='place_last_modifier', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='place',
            name='validated_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='place_validated_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='likevote',
            name='place',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Place'),
        ),
        migrations.AddField(
            model_name='likevote',
            name='post',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Post'),
        ),
        migrations.AddField(
            model_name='likevote',
            name='wine',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Wine'),
        ),
        migrations.AddField(
            model_name='gotfreeglass',
            name='place',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Place'),
        ),
        migrations.AddField(
            model_name='getmyfreeglass',
            name='place',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Place'),
        ),
        migrations.AddField(
            model_name='drankittoo',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Post'),
        ),
        migrations.AddField(
            model_name='drankittoo',
            name='wine',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Wine'),
        ),
        migrations.AddField(
            model_name='donation',
            name='receipt',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.DonationReceipt'),
        ),
        migrations.AddField(
            model_name='comment',
            name='place',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Place'),
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Post'),
        ),
        migrations.AddField(
            model_name='comment',
            name='wine',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Wine'),
        ),
        migrations.AddField(
            model_name='attendee',
            name='cal_event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.CalEvent'),
        ),
        migrations.AddField(
            model_name='abstractimage',
            name='author',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='winemaker',
            name='main_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='main_image', to='web.WinemakerImage'),
        ),
        migrations.AddField(
            model_name='wineimage',
            name='wine',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Wine'),
        ),
        migrations.AddField(
            model_name='wine',
            name='main_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='main_image', to='web.WineImage'),
        ),
        migrations.AddField(
            model_name='wine',
            name='ref_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='wine_ref_image', to='web.VuforiaImage'),
        ),
        migrations.AddField(
            model_name='vuforiaimage',
            name='post',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Post'),
        ),
        migrations.AddField(
            model_name='vuforiaimage',
            name='wine',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Wine'),
        ),
        migrations.AddField(
            model_name='postimage',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Post'),
        ),
        migrations.AddField(
            model_name='postfile',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Post'),
        ),
        migrations.AddField(
            model_name='post',
            name='main_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='main_image', to='web.PostImage'),
        ),
        migrations.AddField(
            model_name='post',
            name='ref_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='post_ref_image', to='web.VuforiaImage'),
        ),
        migrations.AddField(
            model_name='placeimage',
            name='place',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='place_images', to='web.Place'),
        ),
        migrations.AddField(
            model_name='place',
            name='main_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='main_image', to='web.PlaceImage'),
        ),
        migrations.AlterUniqueTogether(
            name='gotfreeglass',
            unique_together=set([('author', 'place')]),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='image',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='web.UserImage'),
        ),
    ]

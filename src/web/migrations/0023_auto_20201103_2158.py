# flake8: noqa
# -*- coding: utf-8 -*-
# Generated by Django 1.11.17 on 2020-11-03 21:58
from __future__ import unicode_literals

from django.db import migrations
from django.db.models import Count, Sum, Q, Subquery, OuterRef, IntegerField, Case, When
from django.db.models.functions import Coalesce


def forward(apps, schema_editor):
    Place = apps.get_model("web", "Place")
    Post = apps.get_model("web", "Post")
    Event = apps.get_model("web", "CalEvent")
    Wine = apps.get_model("web", "Wine")
    Winemaker = apps.get_model("web", "Winemaker")
    UserProfile = apps.get_model("web", "UserProfile")

    likevote_annotation = {
        'likevote_numberr': Count(
            Case(
                When(like_votes__is_archived=False, then=1),
                output_field=IntegerField()
            )
        )
    }

    comment_annotation = {
        'comment_numberr': Count(
            Case(
                When(comments__is_archived=False, then=1),
                output_field=IntegerField()
            )
        )
    }

    dit_annotation = {
        'drank_it_too_numberr': Sum(
            Case(
                When(drank_it_toos__is_archived=False, then=1),
                default=0,
                output_field=IntegerField()
            )
        )
    }

    users_comments = UserProfile.objects.annotate(
        comment_numberr=Count(
            Case(
                When(comments_authored__is_archived=False, then=1),
                output_field=IntegerField()
            )
        )
    ).filter(pk=OuterRef('pk'))

    UserProfile.objects.annotate(
        has_comments=Count('comments_authored')
    ).filter(has_comments__gt=0).update(
        comment_number=Subquery(users_comments.values('comment_numberr')[:1])
    )

    users_likevotes = UserProfile.objects.annotate(
        likevote_numberr=Count(
            Case(
                When(like_votes_authored__is_archived=False, then=1),
                output_field=IntegerField()
            )
        )
    ).filter(pk=OuterRef('pk'))

    UserProfile.objects.annotate(
        has_likevotes=Count('like_votes_authored')
    ).filter(has_likevotes__gt=0).update(
        likevote_number=Subquery(users_likevotes.values('likevote_numberr')[:1])
    )

    users_dits = UserProfile.objects.annotate(
        drank_it_too_numberr=Count(
            Case(
                When(drank_it_toos_authored__is_archived=False, then=1),
                output_field=IntegerField()
            )
        )
    ).filter(pk=OuterRef('pk'))

    UserProfile.objects.annotate(
        has_drank_it_toos=Count('drank_it_toos_authored')
    ).filter(has_drank_it_toos__gt=0).update(
        drank_it_too_number=Subquery(users_dits.values('drank_it_too_numberr')[:1])
    )

    places_comments = Place.objects.annotate(**comment_annotation).filter(pk=OuterRef('pk'))
    Place.objects.update(comment_number=Subquery(places_comments.values('comment_numberr')[:1]))

    places_likevotes = Place.objects.annotate(**likevote_annotation).filter(pk=OuterRef('pk'))
    Place.objects.update(likevote_number=Subquery(places_likevotes.values('likevote_numberr')[:1]))

    events_comments = Event.objects.annotate(**comment_annotation).filter(pk=OuterRef('pk'))
    Event.objects.update(comment_number=Subquery(events_comments.values('comment_numberr')[:1]))

    events_likevotes = Event.objects.annotate(**likevote_annotation).filter(pk=OuterRef('pk'))
    Event.objects.update(likevote_number=Subquery(events_likevotes.values('likevote_numberr')[:1]))

    posts_comments = Post.objects.annotate(**comment_annotation).filter(pk=OuterRef('pk'))
    Post.objects.update(comment_number=Subquery(posts_comments.values('comment_numberr')[:1]))

    posts_likevotes = Post.objects.annotate(**likevote_annotation).filter(pk=OuterRef('pk'))
    Post.objects.update(likevote_number=Subquery(posts_likevotes.values('likevote_numberr')[:1]))

    posts_dits = Post.objects.annotate(**dit_annotation).filter(pk=OuterRef('pk'))
    Post.objects.update(drank_it_too_number=Subquery(posts_dits.values('drank_it_too_numberr')[:1]))

    wines_likevotes = Wine.objects.annotate(
        likevote_numberr=Coalesce(Sum('posts__likevote_number', filter=Q(is_archived=False)), 0)
    ).filter(pk=OuterRef('pk'))

    Wine.objects.update(likevote_number=Subquery(wines_likevotes.values('likevote_numberr')[:1]))

    wines_comments = Wine.objects.annotate(
        comment_numberr=Coalesce(Sum('posts__comment_number', filter=Q(is_archived=False)), 0)
    ).filter(pk=OuterRef('pk'))

    Wine.objects.update(comment_number=Subquery(wines_comments.values('comment_numberr')[:1]))

    wines_dits = Wine.objects.annotate(
        drank_it_too_numberr=Coalesce(Sum('posts__drank_it_too_number', filter=Q(is_archived=False)), 0)
    ).filter(pk=OuterRef('pk'))

    Wine.objects.update(drank_it_too_number=Subquery(wines_dits.values('drank_it_too_numberr')[:1]))

    winemakers_likevotes = Winemaker.objects.annotate(
        likevote_numberr=Coalesce(Sum('wines__likevote_number', filter=Q(is_archived=False)), 0)
    ).filter(pk=OuterRef('pk'))
    Winemaker.objects.update(likevote_number=Subquery(winemakers_likevotes.values('likevote_numberr')[:1]))

    winemakers_comments = Winemaker.objects.annotate(
        comment_numberr=Coalesce(Sum('wines__comment_number', filter=Q(is_archived=False)), 0)
    ).filter(pk=OuterRef('pk'))
    Winemaker.objects.update(comment_number=Subquery(winemakers_comments.values('comment_numberr')[:1]))

    winemakers_dits = Winemaker.objects.annotate(
        drank_it_too_numberr=Coalesce(Sum('wines__drank_it_too_number', filter=Q(is_archived=False)), 0)
    ).filter(pk=OuterRef('pk'))

    Winemaker.objects.update(drank_it_too_number=Subquery(winemakers_dits.values('drank_it_too_numberr')[:1]))


class Migration(migrations.Migration):

    dependencies = [
        ('web', '0022_auto_20201103_2021'),
    ]

    operations = [
        migrations.RunPython(forward),
    ]
